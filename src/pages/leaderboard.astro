---
import BaseLayout from '../layouts/Base.astro';
import "../styles/global.css";

const matches = import.meta.glob("../content/events/*.md", {eager: true});
const eventFiles = Object.values(matches);
const pageTitle = 'Leaderboard'
const events = eventFiles.map((e) => (e.frontmatter.name));
const numEvents = events.length;
const instCodes = ["iiserk", "iiserp", "iiserm", "iiserb", "iisertvm", "iisertir", "iiserbmp", "iisc", "niser"];
const institutes = ["IISER Kolkata", "IISER Pune", "IISER Mohali", "IISER Bhopal", "IISER TVM", "IISER Triupati", "IISER Berhampore", "IISc Bengaluru", "NISER Bhubaneshwar"];
const logos = ["/iiserk.png", "/iiser-pune.png", "/iiserm.png", "/iiserb.png", "/iisertvm.png", "/iisertirupati.png", "/iiserbpr.svg", "/iisc.jpg", "/niser.svg"]
const numInst = instCodes.length;

const scores = instCodes.map((ins) => (eventFiles.map((e) => Math.max(Number(e["frontmatter"][ins]), 0))));

const totals = scores.map((score) => score.reduce((partialSum, a) => partialSum + a, 0));

var board = institutes.map((ins, i) => ([ins, totals[i], logos[i]]));
const compare = (a: (string | number)[], b: (string | number)[]) => {
    if (a[1] >= b[1]) return -1;
    else return 1;
};
board.sort(compare);

var eventBoards = []; 
for (let i = 0; i < numEvents; ++i) {
  eventBoards.push(instCodes.filter((e) => eventFiles[i]["frontmatter"][e] >= 0).map((id, j) => ([institutes[j], eventFiles[i]["frontmatter"][id], logos[j]])));
}
for (let i = 0; i < numEvents; ++i) {
  eventBoards[i].sort(compare);
}
const overallPodium = true;
---

<BaseLayout title= { pageTitle }>
  <div class="main-container">
    <h1>Leaderboard</h1>
    <select name="category" class="cat-select">
      <option value="total" selected>OVERALL</option>
      {
        events.map((e) => (<option value={e}>{e}</option>))
      }
    </select>
    <div class="podium" id="total-podium">
      { overallPodium &&
        <span class="pod">
          <span class="second"><img src="/silver.png" class="position"><span class="pod-logo"><img src={board[1][2]}/></span> {board[1][0]}</span>
          <span class="first"><img src="/gold.png" class="position"><span class="pod-logo"><img src={board[0][2]}/></span>{board[0][0]}</span>
          <span class="third"><img src="/bronze.png" class="position"><span class="pod-logo"><img src={board[2][2]}/></span>{board[2][0]}</span>
        </span>
      }
    </div>
    <ul class="board" id="total">
      <li class="thead"> <span class="institute"> <p></p>Institute </span> <span class="score">Score</span></li>
      {
        board.map((rec) => (
              <li> <span class="institute"><span class="board-logo"><img src={rec[2]}/></span>{rec[0]}</span> <span class="score">{rec[1]}</span></li>
        ))
      }
    </ul>
    {
      eventBoards.map((eventBoard, i) => ( 
      <div class="podium" id={"podium"+i}>
        { eventFiles[i].frontmatter.status === 'scored' &&
          <span class="pod">
            {
              eventBoard.slice(Number(eventFiles[i].frontmatter.first ? eventFiles[i].frontmatter.first : 1), Number(eventFiles[i].frontmatter.first ? eventFiles[i].frontmatter.first : 1) + Number(eventFiles[i].frontmatter.second ? eventFiles[i].frontmatter.second : 1)).map((e, k) => (
              <span class="second"><img src="/silver.png" class="position"><span class="pod-logo"><img src={e[2]}/></span> {e[0]}</span>
              ))
            }
            {
              eventBoard.slice(0, 0 + Number(eventFiles[i].frontmatter.first ? eventFiles[i].frontmatter.first : 1)).map((e, k) => (
              <span class="first"><img src="/gold.png" class="position"><span class="pod-logo"><img src={e[2]}/></span>{e[0]}</span>
              ))
            }
            {
              eventBoard.slice(Number(eventFiles[i].frontmatter.first ? eventFiles[i].frontmatter.first : 1) + Number(eventFiles[i].frontmatter.second ? eventFiles[i].frontmatter.second : 1), Number(eventFiles[i].frontmatter.first ? eventFiles[i].frontmatter.first : 1) + Number(eventFiles[i].frontmatter.second ? eventFiles[i].frontmatter.second : 1) + Number(eventFiles[i].frontmatter.third ? eventFiles[i].frontmatter.third : 1)).map((e, k) => (
                <span class="third"><img src="/bronze.png" class="position"><span class="pod-logo"><img src={e[2]}/></span>{e[0]}</span>
              ))
            }
          </span>
        }
      </div>
        <ul class="board event" id={"event"+i}>
          <li class="thead"> <span class="institute"> <p></p>Institute </span> <span class="score">Score</span></li>
          {
            eventBoard.map((rec) => (
              <li> <span class="institute"><span class="board-logo"><img src={rec[2]}/></span>{rec[0]}</span> <span class="score">{rec[1]}</span></li>
            )) 
          }
        </ul>
      ))
    }
  </div>
</BaseLayout>
<style>
  .main-container {
    width: 100%;
    min-height: 100dvh;
    display: flex;
    flex-direction: column;
    align-items: center;
    gap: 1em;
  }
  .cat-select {
    color: black;
    border-color: var(--accent-color);
    border-radius: 1rem;
    padding: 1em;
    background-color: var(--accent-color-2);
  }
  ul {
    width: 90%;
    max-width: 100ch;
  }
  li {
    list-style: none;
  }

  .board {
    display: grid;
    grid-template-columns: 1fr;
  }

  .board li {
    width: 90%;
    display: grid;
    grid-template-columns: 1fr 1fr;
    padding: 1em;
  }
  .thead {
    font-size: 2ch;
    font-weight: 800;
    text-transform: uppercase;
    color: var(--accent-color);
    border: none;
  }
  li {
    border: 2px solid var(--accent-color-2);
  }
  .score {
    display: grid;
    place-items: center;
  }

  .board-logo {
    width: 50px;
    height: 50px;
    background-color: white;
    border-radius: 100%;
    display: grid;
    place-items: center;
  }
  .board-logo img {
    background-color: white;
    max-width: 30px;
    max-height: 30px;
  }

  .institute {
    display: grid;
    grid-template-columns: 1fr 5fr;
    place-items: center;
    text-align: center;
  }
  .pod {
    display: flex;
    gap: 1em;
    justify-content: center;
    align-items: center;
    flex-direction: column;
  }
  .position {
    max-height: 100px;
  }
  .second .position {
    height: 80px;
  }
  .third .position {
    height: 60px;
  }
  .first, .second, .third {
    display: flex;
    flex-direction: column;
    justify-content: center;
    align-items: center;
    gap: 1em;
    text-align: center;
  }

  .pod-logo {
    width: 50px;
    height: 50px;
    background-color: white;
    border-radius: 100%;
    display: grid;
    place-items: center;
  }
  .pod-logo img {
    background-color: white;
    max-width: 30px;
    max-height: 30px;
  }

  .first {
    order: 1;
  }
  .second {
    order: 2;
  }
  .third {
    order: 3;
  }
  @media (min-width: 850px) {
    .thead {
      border: none;
    }
    li {
      border: 2px solid transparent;
      border-radius: 1rem;
    }
    li:hover {
      border-color: var(--accent-color);
    }
    .pod {
      flex-direction: row;
    }
  .first {
    order: 2;
  }
  .second {
    order: 1;
  }
  .third {
    order: 3;
  }
  }
</style>
<script>
  const eBoards = document.querySelectorAll(".event");
  const overall = document.querySelector("#total");
  const allBoards = document.querySelectorAll(".board");
  const allPodiums= document.querySelectorAll(".podium")
  const cat = document.querySelector("select");
  cat?.addEventListener("change", (e) => {
    const sel = cat.selectedIndex - 1;
    allBoards.forEach((b) => b.setAttribute("style", "display: none;"));
    allPodiums.forEach((p) => p.setAttribute("style", "display: none;"));
    if (sel === -1)  {
      const currentBoard = document.querySelector("#total");
      currentBoard?.setAttribute("style", "display: block");
      const currentPodium = document.querySelector("#total-podium");
      currentPodium?.setAttribute("style", "display: block");
    } else {
      const currentBoard = document.querySelector("#event"+sel);
      currentBoard?.setAttribute("style", "display: block");
      const currentPodium = document.querySelector("#podium"+sel);
      currentPodium?.setAttribute("style", "display: block;");

    }
  });
  eBoards.forEach((b) => b.setAttribute("style", "display: none;"));
  allPodiums.forEach((p) => p.setAttribute("style", "display: none;"));
  document.querySelector("#total-podium")?.setAttribute("style", "display: block;");
</script>