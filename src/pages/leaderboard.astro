---
import { app } from "../firebase/server";
import { getFirestore } from "firebase-admin/firestore";
import BaseLayout from '../layouts/Base.astro';
import "../styles/global.css";

const pageTitle = 'Leaderboard'
interface Scores {
  id: string;
  insti: string;
  battle_of_bands: number;
}

const db = getFirestore(app);
const scoresRef = db.collection("scoreboard");
const scoresSnapshot = await scoresRef.get();
const scores = scoresSnapshot.docs.map((doc) => ({
  id: doc.id,
  ...doc.data(),
})) as Scores[];

const events = ["battle_of_bands"];
const numEvents = events.length;

const numScores = scores.length;
var totals =[];
for (let i = 0; i < numScores; ++i) {
  let s = 0
  for (let j = 0; j < numEvents; ++j) {
    s += Math.max(scores[i][events[j]], 0);
  }  
  totals.push(s);
}

const institutes = scores.map((score: Scores) => (score.insti));
var board = scores.map((score: Scores, i) => ([score.insti, totals[i]]));
const compare = (a: (string | number)[], b: (string | number)[]) => {
    if (a[1] >= b[1]) return -1;
    else return 1;
};
board.sort(compare);

var eventBoards = []; 
for (let i = 0; i < numEvents; ++i) {
  eventBoards.push(scores.map((score: Scores) => ([score.insti, score[events[i]]])));
}
for (let i = 0; i < numEvents; ++i) {
  eventBoards[i].sort(compare);
}

function codeToName(code: string) {
  let name = code.toUpperCase();
  name = name.replace(/_/g, " ");
  return name;
}
---

<BaseLayout title= { pageTitle }>
  <div class="main-container">
    <h1>{ pageTitle }</h1>
    <select name="category" class="cat-select">
      <option value="total" selected>OVERALL</option>
      {
        events.map((e) => (<option value={e}>{codeToName(e)}</option>))
      }
    </select>
    <ul class="board" id="total">
      <li class="thead"> <span class="institute"> Institute </span> <span class="score">Score</span></li>
      {
        board.map((rec) => (
              <li> <span class="institute">{rec[0]}</span> <span class="score">{rec[1]}</span></li>
        ))
      }
    </ul>
    {
      eventBoards.map((eventBoard, i) => (
        <ul class="board event" id={events[i]}>
          <li class="thead"> <span class="institute"> Institute </span> <span class="score">Score</span></li>
          {
            eventBoard.map((rec) => (
              <li> <span class="institute">{rec[0]}</span> <span class="score">{rec[1]}</span></li>
            )) 
          }
        </ul>
      ))
    }
  </div>
</BaseLayout>
<style>
  .main-container {
    width: 100%;
    min-height: 100dvh;
    display: flex;
    flex-direction: column;
    align-items: center;
    gap: 1em;
  }
  .cat-select {
    color: black;
    border-color: var(--accent-color);
    border-radius: 1rem;
    padding: 1em;
    background-color: var(--accent-color-2);
  }
  ul {
    width: 80%;
  }
  li {
    list-style: none;
  }

  .board {
    display: grid;
    grid-template-columns: 1fr;
  }

  .board li {
    width: 90%;
    display: grid;
    grid-template-columns: 1fr 1fr;
    padding: 1em;
  }
  .thead {
    font-size: 1.75ch;
    font-weight: 800;
    border: 2px solid var(--accent-color);
  }
  li {
    border: 2px solid var(--accent-color-2);
  }
  .score {
    text-align: center;
  }

  @media (min-width: 850px) {
    .thead {
      border: none;
    }
    li {
      border: 2px solid transparent;
      border-radius: 1rem;
    }
    li:hover {
      border-color: var(--accent-color);
    }
  .institute{
    text-align: center;

  } 
  }
</style>
<script>
  const eBoards = document.querySelectorAll(".event");
  const overall = document.querySelector("#total");
  const allBoards = document.querySelectorAll(".board");
  const cat = document.querySelector("select");
  cat?.addEventListener("change", (e) => {
    const sel = cat.value;
    allBoards.forEach((b) => b.setAttribute("style", "display: none;"));
    const currentBoard = document.querySelector("#"+sel);
    currentBoard?.setAttribute("style", "display: block");
  });
  eBoards.forEach((b) => b.setAttribute("style", "display: none;"));
</script>